# Each section [] represents an instance to be loaded. There are no restrictions
# to the number of instances. However, instances should not share a NIC. The section name is defined
# by the user and has no impacts elsewhere.
[generic]
# Each section has multiple options of key = value lines. Each section can have one of
# each key only. Mandatory keys are "interface" and "db_name". Everything else is optional.
#
# enable is used to indicate if this section should be ignored or processed. enable=True
# means process and enable=False means ignore. Useful to keep configs ready for the
# future. It has to be True or False, no case sensitive. Default is True.
enable = False
# mode represents modes of operation: all (0) runs counters and thresholds, counters (1) only collects
# interfaces, queues, and vlan statistics, and thresholds (2) collects only queue occupancy, hop delay,
# flow delay and flow path. Default is all (0).
mode = 0
# interface represents the interface's name where the int_collector expects the INT
# reports to come from. There is no default since this is a mandatory field.
interface = lo
# numa_group represents the NUMA group associated with the interface for higher performance.
# This field is optional and there is no default value.
numa_group = 8
# xdp_mode represents if the code should be offloaded to the NIC or not. Currently, most NICs don't
# support XDP PERF and fail to load the code. If set to True, config is ignored.
xdp_mode = False
# int_port represents the UDP port in the INT reports exported by the INT switches. Default is 5900.
int_port = 5900
# save_interval is used to control how often we push data to the database. The shorter the interval, the fast
# user will have access to the data and less data must be stored per write operation. However, the faster the heavier
# for the int collector. This field supports fractions and its unis is seconds. Default is 0.1 seconds.
save_interval = 0.1
# debug is used to print values on the screen before being pushed to the database. It has to be True or False,
# no case sensitive. Default is False. Running in debug mode might lead to loss of data.
debug = True
#
# InFluxDB database options. The INT Collector supports only InFluxDB 1.x.
# database host. Default is localhost.
db_host = localhost
# database name. There is no default since this is a mandatory field.
db_name = my_database
# db_user is not supported yet.
#db_user = user
# db_pass is not supported yet.
#db_pass = pass
# drop_db replaces the old "new_measurement" option and deletes the database in db_name before loading the instance.
# Useful during development phase. Don't do it unless you really know what you are doing. It has to be True or False,
# no case sensitive. Default is False.
drop_db = False
#
# Options for counters mode (ignored when in threshold mode)
# The counters mode works by gathering interface, queue, and VLAN utilization counters (bytes and packets) and exports
# this data to the database. There is no data being pushed by the XDP code to user space (not PERF).
#
# counters_interval represents how fast interface, queue, and vlan counters will be stored. This field
# supports fractions and its unis is seconds. The shorter the number, more data will be stored, faster needs
# to be the database.
counters_interval = 0.5
#
# Options for threshold mode (ignored when in counters mode)
# The threshold mode works by setting thresholds for data being collected based on the characteristics of traffic.
# Thresholds are helpful to avoid saving every telemetry report since there are not significant changes between
# INT reports in 99% of cases. This approach saves CPU since data being pushed by the XDP code to user space (via PERF).
# The higher the thresholds, less data will be stored and granularity is lost.
#
# flow_keepalive is used to record data even if the threshold wasn't reached. It helps when traffic is too
# steady and disappears from Grafana because there were no significant changes. Value is in seconds. Default is 3s.
flow_keepalive = 3
# queue_occ defines the threshold to record variations in queue occupancy. The unit is a number of cells.
# Each cell has 80 bytes. Since RENs do a lot of jumbo frames, the suggestion is a number bigger than the size of 2
# jumbo frames. A jumbo frame might have 9,000 bytes. 2 x 9,000 = 18,000 which is equivalent to 18,000 / 80 = 225.
queue_occ = 225
# flow_latency is used to set the threshold for storing flow latency when it varies more than a value.
# Flow latency is calculated by summing up all hop_delay fields in the path. Unit is nanoseconds.
# Default is 100,000 nanoseconds or 100 microseconds.
flow_latency = 100000
# hop_latency is used to set the threshold for storing per-hop latency when it varies more than a value.
# Unit is nanoseconds. Default is 100,000 nanoseconds or 100 microseconds.
hop_latency = 50000

[instance-counters]
enable = True
mode = 1
interface = lo
db_name = test-counters

[instance-thresholds]
enable = False
mode = 2
interface = lo
db_name = test-threshold
flow_keepalive = 3
queue_occ = 225
flow_latency = 100000
hop_latency = 50000
